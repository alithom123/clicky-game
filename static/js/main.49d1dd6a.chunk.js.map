{"version":3,"sources":["components/Jumbotron/index.jsx","components/Card/index.jsx","utilities/shuffle.js","components/Game/index.jsx","components/Navbar/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Jumbotron","props","react_default","a","createElement","className","highScore","score","gamesPlayed","Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clickedOnce","_this2","onClick","src","imageUrl","React","Component","shuffle","Game","hcc","event","_event$target","target","id","clickcount","console","log","concat","handleInputChange","_event$target2","handleFormSubmit","preventDefault","alert","username","password","setState","githubPageUrl","cardsArray","clickCount","card","slice","forEach","eachCard","JSON","stringify","i","squares","_this3","components_Jumbotron","components_Card","handleCardClick","Navbar","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","role","aria-haspopup","aria-labelledby","type","placeholder","App","components_Navbar","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49d1dd6a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Jumbotron(props) {\n    return (\n        <div className=\"jumbotron\">\n            <h1>Clicky Game</h1>\n            <p>Play the clicky memory game! Click the same image twice and you lose! Don't ... and you win!</p>\n            <p>High Score: {props.highScore}</p>\n            <p>Current Score: {props.score}</p>\n            <p>Games Played: {props.gamesPlayed}</p>\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nclass Card extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clickedOnce: false,\n        };\n    }\n\n\n    render() {\n        return (\n            // <a href=\"\" class=\"custom-card\">\n            <div onClick={() => this.props.onClick()}>\n                <div className=\"click-item\" >\n                    <img className=\"card-img-top\" src={this.props.imageUrl} />\n                    <div className=\"card-body\">\n                        {/* <p>clicked = {this.state.clickedOnce ? \"true\" : \"false\"}</p>\n                        <p>id = {this.props.id}</p> */}\n\n                        {/* <h5 className=\"card-title\">Card title</h5> */}\n                        {/* <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p> */}\n                        {/* <a href=\"#\" className=\"btn btn-primary\" onClick={props.handleCardClick} id={props.id} clickCount={props.clickCount}>Click this card</a> */}\n                    </div>\n                </div>\n            </div>\n            // </a>\n        );\n    }\n}\n\nexport default Card;\n","/* Utility function to shuffle */\nfunction shuffle(array) {\n    var currentIndex = array.length,\n        temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nexport default shuffle;","import React from \"react\";\nimport Jumbotron from \"../Jumbotron/index.jsx\"\nimport Card from \"../Card/index.jsx\";\nimport shuffle from \"../../utilities/shuffle.js\";\n\n\n\nclass Game extends React.Component {\n\n  /* Constructor Start */\n  constructor(props) {\n    super(props);\n    const githubPageUrl = \"https://alithom123.github.io/clicky-game\";\n\n    const cardsArray = [{\n      id: 1,\n      imageUrl: githubPageUrl + \"/1.jpg\",\n      clickCount: 0\n    },\n    {\n      id: 2,\n      imageUrl: githubPageUrl + \"/2.jpg\",\n      clickCount: 0\n    },\n    {\n      id: 3,\n      imageUrl: githubPageUrl + \"/3.jpg\",\n      clickCount: 0\n    },\n    {\n      id: 4,\n      imageUrl: githubPageUrl + \"/4.jpg\",\n      clickCount: 0\n    },\n    {\n      id: 5,\n      imageUrl: githubPageUrl + \"/5.jpg\",\n      clickCount: 0\n    },\n    {\n      id: 6,\n      imageUrl: githubPageUrl + \"/6.jpg\",\n      clickCount: 0\n    },\n    {\n      id: 7,\n      imageUrl: githubPageUrl + \"/7.jpg\",\n      clickCount: 0\n    },\n    {\n      id: 8,\n      imageUrl: githubPageUrl + \"/8.jpg\",\n      clickCount: 0\n    },\n    {\n      id: 9,\n      imageUrl: githubPageUrl + \"/9.jpg\",\n      clickCount: 0\n    },\n    ];\n\n    console.log(cardsArray);\n    // Make a copy of the cardsArray that you shuffle.\n    // var shuffledCardsArray = shuffle(cardsArray.slice());\n    // console.log(\"shuffledCardsArray: \", shuffledCardsArray);\n\n    this.state = {\n      cardsArray: cardsArray,\n      score: 0,\n      highScore: 0,\n      gamesPlayed: 0,\n    };\n\n    console.log(this.state.cardsArray);\n  };\n  /* Constructor End */\n\n  componentDidMount() { }\n\n  componentWillUnmount() { }\n\n  // tick() {\n  //   this.setState({\n  //     date: new Date()\n  //   });\n  // }\n\n  handleCardClick(card) {\n    // this.setState({ x: \"X\" });\n    // console.log(\"handleCardClick running\");\n    // alert(\"handleCardClick running\" + JSON.stringify(card));\n    // console.log(cardId);\n\n    const cardsArray = this.state.cardsArray.slice();\n    cardsArray.forEach((eachCard) => {\n      if (eachCard.id === card.id) { // Found Card.\n\n        // If they have already clicked this card, they lose.\n        if (eachCard.clickCount === 1) {\n          // They lose. \n          if (this.state.score > this.state.highScore) { // Update highScore if necessary.\n            this.state.highScore = this.state.score;\n          }\n          this.state.gamesPlayed += 1;\n          this.setState({\n            cardsArray: cardsArray,\n            gamesPlayed: this.state.gamesPlayed,\n            highScore: this.state.highScore,\n            score: this.state.score\n          });\n\n          alert(\"You lost. Please play again!\");\n\n        } else { // Still playing.\n\n          // Check for win.\n          eachCard.clickCount += 1;\n          this.state.score += 1;\n\n          this.setState({\n            cardsArray: cardsArray,\n            score: this.state.score\n          });\n        }\n\n        alert(JSON.stringify(this.state.cardsArray))\n      }\n    })\n  };\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    squares[i] = 'X';\n    this.setState({ squares: squares });\n  }\n\n  hcc = event => {\n    const { id, clickcount } = event.target;\n    console.log(event);\n    console.log(`id = ${id}`);\n    console.log(`clickCount = ${clickcount}`);\n    // alert(\"Card clicked\");\n  }\n\n  // handle any changes to the input fields\n  handleInputChange = event => {\n    // Pull the name and value properties off of the event.target (the element which triggered the event)\n    const { id, clickcount } = event.target;\n\n    // console.log(`id = ${id}`);\n    // console.log(`clickCount = ${clickcount}`);\n\n    // Set the state for the appropriate input field\n    // this.setState({\n    //   [name]: value\n    // });\n  };\n\n  // When the form is submitted, prevent the default event and alert the username and password\n  handleFormSubmit = event => {\n    event.preventDefault();\n    alert(`Username: ${this.state.username}\\nPassword: ${this.state.password}`);\n    this.setState({ username: \"\", password: \"\" });\n  };\n\n  // renderCard(card) {\n  //   return <Card imageUrl={card.imageUrl} id={card.id} onClick={() => this.handleCardClick(card)}></Card>\n  // }\n\n  render() {\n    return (\n      <div className=\"Game\" >\n        <Jumbotron highScore={this.state.highScore} score={this.state.score} gamesPlayed={this.state.gamesPlayed} />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-4\">\n              <Card imageUrl={this.state.cardsArray[0].imageUrl} id={this.state.cardsArray[0].id} onClick={() => this.handleCardClick(this.state.cardsArray[0])}></Card>\n            </div>\n            <div className=\"col-sm-4\">\n              <Card imageUrl={this.state.cardsArray[1].imageUrl} id={this.state.cardsArray[1].id} onClick={() => this.handleCardClick(this.state.cardsArray[1])}></Card>\n            </div>\n            <div className=\"col-sm-4\">\n              <Card imageUrl={this.state.cardsArray[2].imageUrl} id={this.state.cardsArray[2].id} onClick={() => this.handleCardClick(this.state.cardsArray[2])}></Card>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-4\">\n              <Card imageUrl={this.state.cardsArray[3].imageUrl} id={this.state.cardsArray[3].id} onClick={() => this.handleCardClick(this.state.cardsArray[3])}></Card>\n            </div>\n            <div className=\"col-sm-4\">\n              <Card imageUrl={this.state.cardsArray[4].imageUrl} id={this.state.cardsArray[4].id} onClick={() => this.handleCardClick(this.state.cardsArray[4])}></Card>\n            </div>\n            <div className=\"col-sm-4\">\n              <Card imageUrl={this.state.cardsArray[5].imageUrl} id={this.state.cardsArray[5].id} onClick={() => this.handleCardClick(this.state.cardsArray[5])}></Card>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-4\">\n              <Card imageUrl={this.state.cardsArray[6].imageUrl} id={this.state.cardsArray[6].id} onClick={() => this.handleCardClick(this.state.cardsArray[6])}></Card>\n            </div>\n            <div className=\"col-sm-4\">\n              <Card imageUrl={this.state.cardsArray[7].imageUrl} id={this.state.cardsArray[7].id} onClick={() => this.handleCardClick(this.state.cardsArray[7])}></Card>\n            </div>\n            <div className=\"col-sm-4\">\n              <Card imageUrl={this.state.cardsArray[8].imageUrl} id={this.state.cardsArray[8].id} onClick={() => this.handleCardClick(this.state.cardsArray[8])}></Card>\n            </div>\n          </div>\n\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n\n{/* <div class=\"row\">\n  <div class=\"col-sm-4\">.col-sm-4</div>\n  <div class=\"col-sm-4\">.col-sm-4</div>\n  <div class=\"col-sm-4\">.col-sm-4</div>\n</div> */}\n\n            // shuffle(this.state.cardsArray.slice()).map((card, index) => {\n            //   return this.renderCard(card);\n            // })","import React from \"react\";\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"#\">\n                Navbar\n      </a>\n            <button\n                className=\"navbar-toggler\"\n                data-toggle=\"collapse\"\n                data-target=\"#navbarSupportedContent\"\n                aria-controls=\"navbarSupportedContent\"\n                aria-expanded=\"false\"\n                aria-label=\"Toggle navigation\"\n            >\n                <span className=\"navbar-toggler-icon\" />\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"#\">\n                            Home <span className=\"sr-only\">(current)</span>\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"#\">\n                            Link\n            </a>\n                    </li>\n                    <li className=\"nav-item dropdown\">\n                        <a\n                            className=\"nav-link dropdown-toggle\"\n                            href=\"#\"\n                            id=\"navbarDropdown\"\n                            role=\"button\"\n                            data-toggle=\"dropdown\"\n                            aria-haspopup=\"true\"\n                            aria-expanded=\"false\"\n                        >\n                            Dropdown\n            </a>\n                        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                            <a className=\"dropdown-item\" href=\"#\">\n                                Action\n              </a>\n                            <a className=\"dropdown-item\" href=\"#\">\n                                Another action\n              </a>\n                            <div className=\"dropdown-divider\" />\n                            <a className=\"dropdown-item\" href=\"#\">\n                                Something else here\n              </a>\n                        </div>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link disabled\" href=\"#\">\n                            Disabled\n            </a>\n                    </li>\n                </ul>\n                <form className=\"form-inline my-2 my-lg-0\">\n                    <input\n                        className=\"form-control mr-sm-2\"\n                        type=\"search\"\n                        placeholder=\"Search\"\n                        aria-label=\"Search\"\n                    />\n                    <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">\n                        Search\n          </button>\n                </form>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game/index.jsx\";\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar'\n\nfunction App() {\n\n  return (\n    <div className=\"App\" >\n      <Navbar />\n      <Game />\n      {/* <Jumbotron />\n      <div className=\"container\">\n        <Game />\n      </div> */}\n    </div>\n  )\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}